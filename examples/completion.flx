include "READLINE/readline";
open Readline;
open C_hack;

var scoop_cmds = 
"list",   //[installed] [options] Lists all packages on litterbox.
"search",  //<package>  [options] Searches for package on litterbox
"info",    //<package>  [options] Displays package info
"refresh",  //          [options] Refreshes litterbox package directory cache
"reinstall",   //       [options] Reinstalls all previously installed packages
"get",     //<package> [build dir] [options] Pull package from litterbox
"build",   //[package] [build dir] [options] Builds package in
"test",    //[package]  [options] Runs package test on package in
"install", //[package]  [options] Installs package located at
"clean", //[package]  [options] Removes package build directory at
"exit",
"help";

proc help() {
  println$ "\nHELP\n--------------------"; 
  for cmd in scoop_cmds do
    println$ "  "+cmd;
  done
  endl;
}

fun scoop_completer(text:+char,state:int):+char = {
  var text_s = str(text);
  if state == 0 do
    if not text_s == "" do
      for cmd in scoop_cmds do
        if (startswith cmd text_s) do
          return cstr(cmd);
        done
      done
    else
      save_prompt();
      help();
      restore_prompt();
      ignore(on_new_line());
    done
  done
  //$ Must return no match if no completion found
  return NO_MATCH();
}

//$ Initialize
set_completer(cast[c_handler_t](callback_proxy),scoop_completer);
assert(parse_and_bind('tab: complete')==0);
assert(parse_and_bind('set editing-mode vi')==0);

//$ Main Loop
println$ "readline completion example";
println$ "Type help for help or hit <TAB> on empty line";
println$ "CRTL-D or exit to quit";
while (true) do
  match  readline("completion:>") with
  |Some ?txt  => if not txt == "" do add_history(txt); done 
    match txt.strip with
    |"help" => help(); 
    | "exit" => System::exit(0);
    |_ => println$ "Entered command ' " + txt+"'";
    endmatch;
  |None => goto quit; 
  endmatch;
done
quit:>
endl;