requires package "readline";

class Readline {
open C_hack;
//$ ## Intialization Functions

//$ Parse line as if it had been read from the inputrc file and perform any key bindings and 
//$ variable assignments found (see section 1.3 Readline Init File).
  gen parse_and_bind:string->int = "rl_parse_and_bind (strdup($1.c_str()))";

//$ Read keybindings and variable assignments from filename (see section 1.3 Readline Init File).
  gen read_init_file:string->int = "rl_read_init_file (const_cast<char *>(strdup($1.c_str())))";

//gen rl_bind_key:intint rl_bind_key (int key, rl_command_func_t *function);

//$ ## Line Input Functionss
//$ Read line of text with readline
  gen readline_cstr:string->+char = "readline (const_cast<char *>(strdup($1.c_str())))";

//$ Read line of text with readline, return a string
  fun readline(prompt:string) =>
    let ?line = readline_cstr(prompt) in
      if isNULL(line) then None[string] else Some (string(line)) endif;

//$ ## History functions
   proc add_history:string = "add_history(const_cast<char *>(strdup($1.c_str())));";

//$ ## Miscelaneous

//Change what's displayed on the screen to reflect the current contents of rl_line_buffer.
proc redisplay: 1 = "rl_redisplay ();";

//$ Force the line to be updated and redisplayed, whether or not Readline thinks the screen display is correct.
gen forced_update:1->int =  "rl_forced_update_display ()";

//$ Tell the update functions that we have moved onto a new (empty) line, usually after ouputting a newline.
gen on_new_line:1->int = "rl_on_new_line ()";

//$ Tell the update functions that we have moved onto a new line, with rl_prompt already displayed. 
//$ This could be used by applications that want to output the prompt string themselves, but still 
//$ need Readline to know the prompt string length for redisplay. It should be used after setting 
//$ rl_already_prompted.
gen on_new_line_with_prompt: 1->int = "rl_on_new_line_with_prompt ()";


//$ Reset the display state to a clean state and redisplay the current line starting on a new line.
gen reset_line_state:1->int = "rl_reset_line_state ()";

//$ Move the cursor to the start of the next screen line.
gen crlf:1->int = "rl_crlf ()";

//$ Display character c on rl_outstream. If Readline has not been set to display meta characters 
//$ directly, this will convert meta characters to a meta-prefixed key sequence. This is intended for 
//$ use by applications which wish to do their own redisplay.
gen show_char:int->int = "rl_show_char ($1)";

//$ The arguments are a format string as would be supplied to printf, possibly containing 
//$ conversion specifications such as `%d', and any additional arguments necessary to satisfy the 
//$ conversion specifications. The resulting string is displayed in the echo area. The echo area is 
//$ also used to display numeric arguments and search strings. You should call rl_save_prompt to 
//$ save the prompt information before calling this function.
gen message:string->int = "rl_message (const_cast<char *>(strdup($1.c_str())))";

//$Clear the message in the echo area. If the prompt was saved with a call to rl_save_prompt before 
//$ the last call to rl_message, call rl_restore_prompt before calling this function.
gen clear_message:1->int = "rl_clear_message ()";

//$ Save the local Readline prompt display state in preparation for displaying a new message in the 
//$ message area with rl_message().
proc save_prompt: 1 = "rl_save_prompt ();";

//$ Restore the local Readline prompt display state saved by the most recent call to rl_save_prompt.
//$ if rl_save_prompt was called to save the prompt before a call to rl_message, this function should 
//$ be called before the corresponding call to rl_clear_message.
proc restore_prompt: 1 = "rl_restore_prompt ();";

//$ Expand any special character sequences in prompt and set up the local Readline prompt redisplay 
//$ variables. This function is called by readline(). It may also be called to expand the primary prompt 
//$ if the rl_on_new_line_with_prompt() function or rl_already_prompted variable is used. It returns the
//$ number of visible characters on the last line of the (possibly multi-line) prompt. Applications may 
//$ indicate that the prompt contains characters that take up no physical screen space when displayed
//$  by bracketing a sequence of such characters with the special markers 
//$ RL_PROMPT_START_IGNORE and RL_PROMPT_END_IGNORE (declared in `readline.h'. This may 
//$ be used to embed terminal-specific escape sequences in prompts.
gen expand_prompt:string->int = "rl_expand_prompt (cons_cast<char *>(strdup($1)))";

//$ Make Readline use prompt for subsequent redisplay. This calls rl_expand_prompt() to expand the 
//$ prompt and sets rl_prompt to the result.
gen set_prompt:string->int = "rl_set_prompt (const_cast<char *>(strdup($1)))";

//$ Completion
header """
typedef char* (Callback_Proxy )(char*,int,void*);
Callback_Proxy *proxy_callback;
void* proxy_callback_data;
char* generator(const char* text, int state) {
    return proxy_callback(const_cast<char *>(text),state,proxy_callback_data);
}
char **completion_entry_func_proxy(const char* text,int start,int end) {
       char **matches;
        matches = (char **)NULL;
        if (start == 0 && proxy_callback_data != NULL) {
                matches = rl_completion_matches ((char*)text,&generator);
        }
        return matches;
}

 void set_completer(Callback_Proxy cb,void * client_data) {
    proxy_callback = cb;
    proxy_callback_data = client_data;
    rl_completion_entry_function = generator;
   }

void set_attepmted_completer(Callback_Proxy cb,void * client_data) {
    proxy_callback = cb;
    proxy_callback_data = client_data;
    rl_attempted_completion_function = completion_entry_func_proxy;
   }

"""; 
  callback fun callback_proxy: +char*int*callback_proxy -> +char;
    typedef f_handler_t = +char*int -> +char;
   typedef c_handler_t = +char*int*address --> +char;
   proc set_completer: c_handler_t*f_handler_t = "set_completer($1,$2);";
   proc set_attempted_completer: c_handler_t*f_handler_t = "set_attempted_completer($1,$2);";
   
}
